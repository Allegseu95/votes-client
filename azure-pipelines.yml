# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

name: $(MajorVersion).$(MinorVersion).$(Date:yy)$(DayOfYear)$(Rev:.rr)

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  netVersion: '6.x'
  pass: 'Y6Of084ft9-'
  db: 'Escrutinio'

steps:
# - task: DotNetCoreCLI@2
#   displayName: "Restauración de dependencias"
#   inputs:
#     command: 'restore'
#     projects: '$(solution)'
#     feedsToUse: 'select'
    
# - task: DotNetCoreCLI@2
#   displayName: 'Compilación de solución'
#   inputs:
#     command: 'build'
#     projects: '$(solution)'
#     arguments: '--configuration $(buildConfiguration)'
# - task: PowerShell@2
#   displayName: "Instalando SQL Server"
#   inputs:
#     targetType: 'inline'
#     script: 'sudo MSSQL_PID=Developer ACCEPT_EULA=Y MSSQL_SA_PASSWORD= $(pass) /opt/mssql/bin/mssql-conf -n setup'

- task: PowerShell@2
  displayName: 'Descargando la imagen de sql server'
  inputs:
    targetType: 'inline'
    script: 'docker pull mcr.microsoft.com/mssql/server:2022-latest'

- task: PowerShell@2
  displayName: 'Ejecutando la imagen'
  inputs:
    targetType: 'inline'
    script: 'docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=$(pass)" -p 1433:1433 --name sql1 --hostname sql1 -d mcr.microsoft.com/mssql/server:2022-latest'

- task: PowerShell@2
  displayName: 'Confirmar contenedor'
  inputs:
    targetType: 'inline'
    script: 'docker ps -a'
# - task: PowerShell@2
#   displayName: "Creación de base de datos $(db)"
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your PowerShell commands here.
      
#       sqlcmd -U 'SA' -P $(pass) -Q 'create database $(db)'
      # choco install sql-server-express

# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'custom'
#     custom: 'dotnet ef database update --verbose'


# - task: DotNetCoreCLI@2
#   displayName: 'Ejecución de tests'
#   inputs:
#     command: 'test'
#     projects: '**/*Test*.csproj'
#     arguments: '--configuration $(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   displayName: 'Publicación de artefactos'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#     modifyOutputPath: false

# - task: PublishPipelineArtifact@1
#   displayName: 'Delivery de paquete'
#   inputs:
#     targetPath: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'myWebsiteName'


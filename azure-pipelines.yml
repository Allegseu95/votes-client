# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

name: $(MajorVersion).$(MinorVersion).$(Date:yy)$(DayOfYear)$(Rev:.rr)

variables:
  solution: '**\*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  usr: 'SA'
  db: 'Votaciones'
  srv: '(localdb)\MSSQLLocalDB'
  tPrj: '$(Build.SourcesDirectory)\Votaciones\Aplicacion\Aplicacion.csproj'
  sPrj: '$(Build.SourcesDirectory)\Votaciones\Cliente\Server\Cliente.Server.csproj'
  sqlScript: '$(Build.SourcesDirectory)\SQL\migration.sql' 
  ConnectionStrings.DefaultConnection: 'Data Source=$(srv);Initial Catalog=$(db);User ID=$(usr);Password=$(pwd);TrustServerCertificate=True'

stages:
 - stage: 'buildandtest'
   displayName: "Compilar y Ejecutar Tests"
   jobs:
    - job: build
      displayName: 'Compilaci贸n'
      steps:
        - task: NuGetToolInstaller@1
        - task: NuGetCommand@2
          displayName: 'Restaurando paquetes'
          inputs:
            restoreSolution: '$(solution)'
        - task: VSBuild@1
          displayName: 'Compilaci贸n - $(Build.BuildNumber)'
          inputs:
            solution: '$(solution)'
            msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)" /p:Version=$(Build.BuildNumber)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        - task: FileTransform@1
          displayName: "Transformando appsettingsw"
          inputs:
            folderPath: '$(Pipeline.Workspace)\'
            fileType: 'json'
            targetFiles: '**\appsettings.json'

        - task: CopyFiles@2
          inputs:
            Contents: '$(Pipeline.Workspace)\**\appsettings.json'
            TargetFolder: '$(Build.ArtifactStagingDirectory)\'
        - task: PowerShell@2
          displayName: "Creaci贸n de base de datos $(db)"
          inputs:
            targetType: 'inline'
            script: |
              # Write your PowerShell commands here.
              SqlLocalDB.exe start MSSQLLocalDB
              sqlcmd -S '$(srv)' -Q 'CREATE DATABASE $(db)'
        - task: PowerShell@2
          displayName: 'Instalar herramienta ef'
          inputs:
            targetType: 'inline'
            script: 'dotnet tool install --global dotnet-ef'
        - task: PowerShell@2
          displayName: 'Crear script'
          inputs:
            targetType: 'inline'
            script: 'dotnet ef migrations script --verbose --no-build -p $(tPrj) -s $(sPrj) -o $(sqlScript)  --idempotent --configuration $(BuildConfiguration)'    
        - task: CopyFiles@2
          inputs:
            Contents: '$(sqlScript)'
            TargetFolder: '$(build.artifactstagingdirectory)\'
        - task: PublishBuildArtifacts@1
          displayName: 'Publicaci贸n Web'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
            
       

  
 - stage: deploytest
   displayName: 'Deploy a entorno de Test'
   dependsOn: buildandtest
   condition: succeeded()
   jobs:
   - deployment: 'deploydbtest'
     environment: 'Test'
     displayName: Deploy BD a Testing
     strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                itemPattern: '**\*.sql'
                targetPath: '$(Pipeline.Workspace)'
            - task: SqlAzureDacpacDeployment@1
              inputs:
                azureSubscription: 'votaciones'
                AuthenticationType: 'server'
                ServerName: '$(sqlsrv)'
                DatabaseName: '$(sqldb)'
                SqlUsername: '$(sqlusr)'
                SqlPassword: $(pwd)
                deployType: 'SqlTask'
                SqlFile: '$(Pipeline.Workspace)\drop\sql\migration.sql'
                IpDetectionMethod: 'AutoDetect'
   - deployment: 'deploydbtest'
     environment: 'Test'
     displayName: Deploy Web a Testing
     strategy:
        runOnce:
          deploy:
            steps:
              - checkout: none
              - task: DownloadPipelineArtifact@2
                inputs:
                  buildType: 'current'
                  itemPattern: '**\*.zip'
                  targetPath: '$(Pipeline.Workspace)'
              - task: AzureWebApp@1
                inputs:
                  azureSubscription: 'votaciones'
                  appType: 'webApp'
                  appName: 'dev-diit-votaciones'
                  deployToSlotOrASE: true
                  resourceGroupName: 'rg-dev-diit-estudiantes-votaciones'
                  slotName: 'production'
                  package: '$(System.DefaultWorkingDirectory)/**/*.zip'
                  appSettings: '-ConnectionStrings.BlobStorageConnection $(Blob) -ConnectionStrings.DefaultConnection Server=$(sqlsrv),1433;Initial Catalog=$(sqldb);Persist Security Info=False;User ID=$(sqlusr);Password=$(pwd);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
                  deploymentMethod: 'auto'


# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

name: $(MajorVersion).$(MinorVersion).$(Date:yy)$(DayOfYear)$(Rev:.rr)

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  netVersion: '6.x'
  usr: 'SA'
  pwd: 'Y6Of084ft9-'
  db: 'Escrutinio'
  srv: 'localhost'
  tPrj: '$(Build.SourcesDirectory)/Votaciones/Aplicacion/Aplicacion.csproj'
  sPrj: '$(Build.SourcesDirectory)/Votaciones/Cliente/Server/Cliente.Server.csproj'
  sqlScript: '$(Build.ArtifactStagingDirectory)/SQL/migration.sql'

steps:

- task: PowerShell@2
  displayName: 'Descargando la imagen de sql server'
  inputs:
    targetType: 'inline'
    script: 'docker pull mcr.microsoft.com/mssql/server:2022-latest'

- task: PowerShell@2
  displayName: 'Ejecutando la imagen'
  inputs:
    targetType: 'inline'
    script: 'docker run -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=$(pwd)" -p 1433:1433 --name sql1 --hostname sql1 -d mcr.microsoft.com/mssql/server:2022-latest'

- task: PowerShell@2
  displayName: 'Confirmar contenedor'
  inputs:
    targetType: 'inline'
    script: 'docker ps -a'
- task: DotNetCoreCLI@2
  displayName: 'Compilación de solución'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: '--configuration $(buildConfiguration)'



- task: PowerShell@2
  displayName: "Creación de base de datos $(db)"
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      # docker exec  sql1
      /opt/mssql-tools/bin/sqlcmd -S localhost -U $(usr) -P $(pwd)  -Q 'create database $(db)'
      
- task: PowerShell@2
  displayName: "Confirmar creación de base de datos $(db)"
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      # docker exec  sql1
      Write-Host 'Bases de datos instaladas'
      /opt/mssql-tools/bin/sqlcmd -S localhost -U $(usr) -P $(pwd)  -Q 'SELECT Name from sys.databases;'
- task: PowerShell@2
  displayName: 'Instalar herramienta ef'
  inputs:
    targetType: 'inline'
    script: 'dotnet tool install --global dotnet-ef'

- task: PowerShell@2
  displayName: 'Creando script de esquema de BD'
  inputs:
    targetType: 'inline'
    script: 'dotnet ef migrations script --verbose --no-build -p $(tPrj) -s $(sPrj) -o $(sqlScript)  --idempotent --configuration $(BuildConfiguration)'

- task: PowerShell@2
  displayName: "Ejecutando la migración a la base $(db)"
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      # docker exec  sql1
      /opt/mssql-tools/bin/sqlcmd -S localhost -U $(usr) -P $(pwd)  -i $(sqlScript)

- task: PowerShell@2
  displayName: "Confirmando la actualización de la migración en $(db)"
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      # docker exec  sql1
      /opt/mssql-tools/bin/sqlcmd -S localhost -U $(usr) -P $(pwd)  -Q 'sp_tables $(db)'
# - task: DotNetCoreCLI@2
#   displayName: 'Ejecución de tests'
#   inputs:
#     command: 'test'
#     projects: '**/*Test*.csproj'
#     arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'Publicación de artefactos'
  inputs:
    command: 'publish'
    publishWebProjects: true
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    modifyOutputPath: false

- task: PublishPipelineArtifact@1
  displayName: 'Delivery de paquete'
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop'


# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

name: $(MajorVersion).$(MinorVersion).$(Date:yy)$(DayOfYear)$(Rev:.rr)

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  usr: 'SA'
  pwd: 'Y6Of084ft9-'
  db: 'Escrutinio'
  srv: 'localhost'
  tPrj: '$(Build.SourcesDirectory)/Votaciones/Aplicacion/Aplicacion.csproj'
  sPrj: '$(Build.SourcesDirectory)/Votaciones/Cliente/Server/Cliente.Server.csproj'
  sqlScript: '$(Build.SourcesDirectory)/SQL/migration.sql' 
  # '$(Build.ArtifactStagingDirectory)/SQL/migration.sql'
  ConnectionStrings.DefaultConnection: 'Data Source=$(srv);Initial Catalog=$(db);User ID=$(usr);Password=$(pwd);TrustServerCertificate=True'

stages:
 - stage: 'buildandtest'
   displayName: "Compilar y Ejecutar Tests"
   jobs:
    - job: build
      displayName: 'Compilación'
      steps:
        - task: DotNetCoreCLI@2
          displayName: 'Restauración de paquetes'
          inputs:
            command: 'restore'
            projects: '$(solution)'
            feedsToUse: 'select'
        - task: VSBuild@1
          displayName: 'Compilación - $(Build.BuildNumber)'
          inputs:
            solution: '$(solution)'
            msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)" /p:Version=$(Build.BuildNumber)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        - task: PublishBuildArtifacts@1
          displayName: 'Publicación Web'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        
        - task: PowerShell@2
          displayName: "Creación de base de datos $(db)"
          inputs:
            targetType: 'inline'
            script: |
              # Write your PowerShell commands here.
              
              SqlLocalDB.exe create $(db)  
              SqlLocalDB.exe start $(db)  
              SqlLocalDB.exe info $(db)
              # choco install sql-server-express

        - task: PowerShell@2
          displayName: 'Instalar herramienta ef'
          inputs:
            targetType: 'inline'
            script: 'dotnet tool install --global dotnet-ef'
             
        - task: PowerShell@2
          displayName: 'Crear script'
          inputs:
            targetType: 'inline'
            script: 'dotnet ef migrations script --verbose --no-build -p $(tPrj) -s $(sPrj) -o $(sqlScript)  --idempotent --configuration $(BuildConfiguration)'    
        - task: SqlDacpacDeploymentOnMachineGroup@0
          displayName: "Pubicación de esquema de BD"
          inputs:
            TaskType: 'sqlQuery'
            SqlFile: '$(sqlScript)'
            ExecuteInTransaction: true
            ServerName: '(localdb)\MSSQLLocalDB'
            DatabaseName: '$(db)'
            AuthScheme: 'windowsAuthentication'

        - task: DotNetCoreCLI@2
          displayName: 'Ejecución de tests'
          inputs:
            command: 'test'
            projects: '**\*.Test.csproj'
            testRunTitle: 'Build Test'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

  
#  - stage: deploytest
#    displayName: 'Deploy a entorno de Test'
#    dependsOn: buildandtest
#    condition: succeeded()
#    jobs:
#    - deployment: 'deploydbtest'
#      environment: 'Test'
#      displayName: Deploy BD a Testing
#      strategy:
#       runOnce:
#         deploy:
#           steps:
#             - checkout: none
#             - task: DownloadPipelineArtifact@2
#               inputs:
#                 buildType: 'current'
#                 itemPattern: '**/*.dacpac'
#                 targetPath: '$(Pipeline.Workspace)'
#             - task: SqlAzureDacpacDeployment@1
#               inputs:
#                 azureSubscription: 'Azure - CEDIA -2022(a8d00b60-3452-491a-b34e-10f6dcd564bc)'
#                 AuthenticationType: 'server'
#                 ServerName: '$(srv)'
#                 DatabaseName: 'SGAPTest'
#                 SqlUsername: '$(usr)'
#                 SqlPassword: '$(pwd)'
#                 deployType: 'DacpacTask'
#                 DeploymentAction: 'Publish'
#                 DacpacFile: '$(Pipeline.Workspace)/**/BaseDatos.dacpac'
#                 IpDetectionMethod: 'AutoDetect'
#    - deployment: deploywebtest
#      environment: 'Test'
#      displayName: Deploy Server a Testing
#      dependsOn: deploydbtest
#      condition: succeeded()
#      variables:
#       AppName: Sistema de Gestión Académica - Postgrado (Pruebas)
#       AzureAd.ClientId: "$(clientid)"
#       ConnectionStrings.DefaultConnection: 'Server=tcp:diitdbs.database.windows.net,1433;Initial Catalog=SGAPTest;Persist Security Info=False;User ID=$(usr);Password=$(pwd);MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;'
#      strategy:
#       runOnce:
#         deploy:
#           steps:
#           - checkout: none
#           - task: DownloadPipelineArtifact@2
#             inputs:
#                 buildType: 'current'
#                 itemPattern: '**/*.zip'
#                 targetPath: '$(Pipeline.Workspace)'
#           - task: AzureRmWebAppDeployment@4
#             inputs:
#               ConnectionType: 'AzureRM'
#               azureSubscription: 'Azure - CEDIA -2022(a8d00b60-3452-491a-b34e-10f6dcd564bc)'
#               appType: 'webApp'
#               WebAppName: 'sgap'
#               deployToSlotOrASE: true
#               ResourceGroupName: 'rg-sgap'
#               SlotName: 'sgaptest'
#               packageForLinux: '$(Pipeline.Workspace)/**/Cliente.zip'
#               enableXmlVariableSubstitution: true
#               JSONFiles: '**/appsettings.json'

# - task: FileTransform@1
#   displayName: "Running File Transform Task"
#   inputs:
#     folderPath: '$(Pipeline.Workspace)/'
#     fileType: 'json'
#     targetFiles: '**/appsettings.json'

# - task: CopyFiles@2
#   inputs:
#     Contents: '$(Pipeline.Workspace)/**/appsettings.json'
#     TargetFolder: '$(Build.ArtifactStagingDirectory)/'



# - task: PowerShell@2
#   displayName: 'Modificando script de BD'
#   inputs:
#     targetType: 'inline'
#     script: '@("Use $(db)") +  (Get-Content $(sqlScript)) | Set-Content $(sqlScript)'
# - task: PowerShell@2
#   displayName: "Ejecutando la migración a la base $(db)"
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your PowerShell commands here.
#       # docker exec  sql1
#       /opt/mssql-tools/bin/sqlcmd -S localhost -U $(usr) -P $(pwd) -i $(sqlScript)

# - task: PowerShell@2
#   displayName: "Confirmando la actualización de la migración en $(db)"
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write your PowerShell commands here.
#       # docker exec  sql1
#       /opt/mssql-tools/bin/sqlcmd -S localhost -U $(usr) -P $(pwd)  -Q 'use $(db) exec sp_tables;'

# - task: DotNetCoreCLI@2
#   displayName: 'Ejecución de tests'
#   inputs:
#     command: 'test'
#     projects: '**/*Test*.csproj'
#     arguments: '--configuration $(buildConfiguration)'

# - task: DotNetCoreCLI@2
#   displayName: 'Publicación de artefactos'
#   inputs:
#     command: 'publish'
#     publishWebProjects: true
#     arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
#     modifyOutputPath: false
#     projects: '**/*.csproj'

# - task: PublishPipelineArtifact@1
#   displayName: 'Delivery de paquete'
#   inputs:
#     targetPath: '$(Build.ArtifactStagingDirectory)' 
#     artifactName: 'drop'


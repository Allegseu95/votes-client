# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-latest

name: $(MajorVersion).$(MinorVersion).$(Date:yy)$(DayOfYear)$(Rev:.rr)

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  usr: 'SA'
  db: 'Escrutinio'
  srv: '(localdb)\MSSQLLocalDB'
  tPrj: '$(Build.SourcesDirectory)\Votaciones\Aplicacion\Aplicacion.csproj'
  sPrj: '$(Build.SourcesDirectory)\Votaciones\Cliente\Server\Cliente.Server.csproj'
  sqlScript: '$(Build.SourcesDirectory)\SQL\migration.sql' 
  ConnectionStrings.DefaultConnection: 'Data Source=$(srv);Initial Catalog=$(db);User ID=$(usr);Password=$(pwd);TrustServerCertificate=True'

stages:
 - stage: 'buildandtest'
   displayName: "Compilar y Ejecutar Tests"
   jobs:
    - job: build
      displayName: 'Compilación'
      steps:
        # - checkout: none
        # - task: DotNetCoreCLI@2
        #   displayName: 'Restauración de paquetes'
        #   inputs:
        #     command: 'restore'
        #     projects: '$(solution)'
        #     feedsToUse: 'select'
        - task: NuGetToolInstaller@1

        - task: NuGetCommand@2
          inputs:
            restoreSolution: '$(solution)'
        - task: VSBuild@1
          displayName: 'Compilación - $(Build.BuildNumber)'
          inputs:
            solution: '$(solution)'
            msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)" /p:Version=$(Build.BuildNumber)'
            platform: '$(buildPlatform)'
            configuration: '$(buildConfiguration)'
        - task: PublishBuildArtifacts@1
          displayName: 'Publicación Web'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        
        - task: PowerShell@2
          displayName: "Creación de base de datos $(db)"
          inputs:
            targetType: 'inline'
            script: |
              # Write your PowerShell commands here.
              
              # SqlLocalDB.exe create $(db)  
              # SqlLocalDB.exe share $(db)  
              SqlLocalDB.exe start MSSQLLocalDB
              sqlcmd -S '$(srv)' -Q 'CREATE DATABASE $(db)'


        - task: PowerShell@2
          displayName: 'Instalar herramienta ef'
          inputs:
            targetType: 'inline'
            script: 'dotnet tool install --global dotnet-ef'
             
        - task: PowerShell@2
          displayName: 'Crear script'
          inputs:
            targetType: 'inline'
            script: 'dotnet ef migrations script --verbose --no-build -p $(tPrj) -s $(sPrj) -o $(sqlScript)  --idempotent --configuration $(BuildConfiguration)'    
        - task: CopyFiles@2
          inputs:
            Contents: '$(sqlScript)'
            TargetFolder: '$(build.artifactstagingdirectory)\'
        - task: PublishBuildArtifacts@1
          displayName: 'Publicación Web'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'
        - task: SqlDacpacDeploymentOnMachineGroup@0
          displayName: "Pubicación de esquema de BD"
          inputs:
            TaskType: 'sqlQuery'
            SqlFile: '$(sqlScript)'
            TargetMethod: 'server'
            # ExecuteInTransaction: true
            ServerName: '(localdb)\MSSQLLocalDB'
            DatabaseName: '$(db)'
            AuthScheme: 'windowsAuthentication'
        - task: PowerShell@2
          displayName: "Comprobación esquema"
          inputs:
            targetType: 'inline'
            script: |
              # Write your PowerShell commands here.

              sqlcmd -S '$(srv)'  -Q 'use $(db) exec sp_tables;'

        - task: DotNetCoreCLI@2
          displayName: 'Ejecución de tests'
          inputs:
            command: 'test'
            projects: '**\*.Test.csproj'
            testRunTitle: 'Build Test'
            workingDirectory: '$(System.DefaultWorkingDirectory)'
            arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'

       

  
 - stage: deploytest
   displayName: 'Deploy a entorno de Test'
   dependsOn: buildandtest
   condition: succeeded()
   jobs:
   - deployment: 'deploydbtest'
     environment: 'Test'
     displayName: Deploy BD a Testing
     strategy:
      runOnce:
        deploy:
          steps:
            - checkout: none
            - task: DownloadPipelineArtifact@2
              inputs:
                buildType: 'current'
                itemPattern: '**/*.sql'
                targetPath: '$(Pipeline.Workspace)'
            - task: SqlAzureDacpacDeployment@1
              inputs:
                azureSubscription: 'votaciones'
                AuthenticationType: 'server'
                ServerName: 'dbsrv-dev-diit-estudiantes.database.windows.net'
                DatabaseName: 'Votaciones'
                SqlUsername: 'diit.admin.dev.sql'
                SqlPassword: $(pwd)
                deployType: 'SqlTask'
                SqlFile: '$(Pipeline.Workspace)drop\sql\migration.sql'
                IpDetectionMethod: 'AutoDetect'


